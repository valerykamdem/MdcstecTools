@inherits LayoutComponentBase

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigationManager
@*@inject IAuthorizationService authorizationService
@inject IRefreshTokenService ValidateRefreshToken*@
@inject IJSRuntime JSRuntime

<MudThemeProvider Theme="_themeManager.Theme" />
<MudDialogProvider FullWidth="true"
                   MaxWidth="MaxWidth.ExtraSmall"
                   CloseButton="true"
                   DisableBackdropClick="true"
                   NoHeader="false"
                   Position="DialogPosition.Center"
                   CloseOnEscapeKey="true" />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="_themeManager.AppBarElevation">
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudIcon Icon="@Icons.Custom.Brands.MudBlazor" Size="Size.Large" />
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
            <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.Xs">
            <MudText Typo="Typo.h6" Class="ml-4">MDCSTEC TOOLS</MudText>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
            <MudText Typo="Typo.subtitle2">MDCSTEC TOOLS</MudText>
        </MudHidden>
        <MudSpacer />
       @* <MudMenu Icon="@Icons.Material.Outlined.Translate" Color="Color.Inherit" Direction="Direction.Bottom" OffsetY="true" Dense="true">
            <MudMenuItem>English</MudMenuItem>
            <MudMenuItem>Deutsch</MudMenuItem>
            <MudMenuItem>Francais</MudMenuItem>
        </MudMenu>*@
        @* <MudMenu Icon="@Icons.Material.Outlined.Widgets" Color="Color.Inherit" Direction="Direction.Bottom" OffsetY="true" Dense="true">
        <MudMenuItem Link="https://mudblazor.com/">MudBlazor</MudMenuItem>
        <MudMenuItem Link="https://github.com/Garderoben/MudBlazor.Templates">Source Code</MudMenuItem>
        </MudMenu>*@
        <MudMenu Direction="Direction.Left" OffsetX="true" Dense="true" Class="mt-1 ml-4">
            <ActivatorContent>
                <MudAvatar Image="images/userIcon.jpg" />
            </ActivatorContent>
            <ChildContent>
                @*<PersonCard Class="mt-n2" />*@
                <LoginDisplay />
                <MudDivider Class="mb-2" />
                @*<MudListItem Text="Account" Icon="@Icons.Material.Outlined.Person" Href="/personal/account" />*@
                <MudListItem Text="Log Out" Icon="@Icons.Material.Outlined.Logout" OnClick="Logout" />
            </ChildContent>
        </MudMenu>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="_themeManager.DrawerElevation" ClipMode="_themeManager.DrawerClipMode" Variant="@DrawerVariant.Mini">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudToolBar DisableGutters="true">
                <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" Class="ml-3" />
                <MudBreadcrumbs Items="_items"></MudBreadcrumbs>
                <MudSpacer />
            </MudToolBar>
        </MudHidden>
        <MudContainer MaxWidth="MaxWidth.False" Class="mt-4">
            @Body
            <MudScrollToTop OnScroll="OnScroll">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowUpward" Color="Color">Go to top</MudButton>
            </MudScrollToTop>
        </MudContainer>
    </MudMainContent>
    @*<MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))" />
    <MudThemeManager Open="_themeManagerOpen" OpenChanged="OpenThemeManager" Theme="_themeManager" ThemeChanged="UpdateTheme" />*@
</MudLayout>


@code {

    private ThemeManagerTheme _themeManager = new ThemeManagerTheme
    {
        Theme = new MudBlazorAdminDashboard(),
        DrawerClipMode = DrawerClipMode.Always,
        //FontFamily = "Montserrat",
        DefaultBorderRadius = 6,
        AppBarElevation = 1,
        DrawerElevation = 1
    };
    
    public string bbDrawerClass = "";
    public string? Year { get; set; }
    public bool _drawerOpen = true;
    public bool _themeManagerOpen = false;
    public string? baseUrl;

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
         new BreadcrumbItem("Dashboard", href: "/", icon: Icons.Material.Filled.Dashboard),
    };   

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        DateTime myDT = DateTime.Now;
        Year = myDT.Year.ToString();

        //await JSRuntime.InitializeInactivityTimer(DotNetObjectReference.Create(this));

        baseUrl = navigationManager.BaseUri;
        BuildBreadcrumbsAsync();
        navigationManager.LocationChanged += OnLocationChanges;
    }

    void OnLocationChanges(object sender, LocationChangedEventArgs e) => BuildBreadcrumbsAsync();

    private void BuildBreadcrumbsAsync()
    {
        string uri = navigationManager.Uri.Replace(baseUrl, " ").Trim();

        _items.RemoveRange(1, _items.Count - 1);

        _items.AddRange(GetBreadcrumbItem(uri));

        StateHasChanged();
    }

    public void Logout()
    {
        ((ApiAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsLoggedOutAsync();
    }

    [JSInvokable]
    public void LogoutTimer()
    {
        ((ApiAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsLoggedOutAsync();
    }

    public string GetAssemblyVersion()
    {
        return GetType().Assembly.GetName().Version.ToString();
    }

    Color Color = Color.Success;
    private void OnScroll(ScrollEventArgs e)
    {
        Color = (e.FirstChildBoundingClientRect.Top * -1) switch
        {
            var x when x < 500 => Color.Primary,
            var x when x < 1500 => Color.Secondary,
            var x when x < 2500 => Color.Tertiary,
            _ => Color.Error
        };
    }

    private List<BreadcrumbItem> GetBreadcrumbItem(string uri)
    {
        List<BreadcrumbItem> item = new();
        switch (uri)
        {
            case "hw-files":
                item.Add(new BreadcrumbItem("HW File", href: "/hw-files", icon: Icons.Material.Filled.Analytics));
                break;
            case "controller-files":
                item.Add(new BreadcrumbItem("Controller Analysis", href: "/controller-files", icon: Icons.Material.Filled.Article));
                break;
            case "config-files":
                item.Add(new BreadcrumbItem("Config Analysis", href: "/config-files", icon: Icons.Material.Filled.TextSnippet));
                item.Add(new BreadcrumbItem("System Config Analysis", href: "/config-files", icon: Icons.Material.Filled.Assessment));
                break;
            case "generate-pdf-files":
                item.Add(new BreadcrumbItem("Config Analysis", href: "/generate-pdf-files", icon: Icons.Material.Filled.TextSnippet));
                item.Add(new BreadcrumbItem("Generate Pdf", href: "/generate-pdf-files", icon: Icons.Material.Filled.Print));
                break;
        }

        return item;
    }
}


@*<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1" Color="Color.Tertiary">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5">MDCSTEC TOOLS</MudText>
        <MudSpacer />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Variant="@DrawerVariant.Mini" Elevation="1" Color="Color.Dark">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-1 pt-1">
            <MudBreadcrumbs Items="_items"></MudBreadcrumbs>
            @Body
            <MudScrollToTop OnScroll="OnScroll">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowUpward" Color="Color">Go to top</MudButton>
            </MudScrollToTop>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    private MudTheme Theme = new MudTheme();

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Dashboard >", href: "#"),
        //new BreadcrumbItem("Dashboard", href: "#"),
    };   

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    Color Color = Color.Success;
    private void OnScroll(ScrollEventArgs e)
    {
        Color = (e.FirstChildBoundingClientRect.Top * -1) switch
        {
            var x when x < 500 => Color.Primary,
            var x when x < 1500 => Color.Secondary,
            var x when x < 2500 => Color.Tertiary,
            _ => Color.Error
        };
    }
}*@